# Output path
output.path = ./

# Write a restart file on December the 31st
# Since the restart files are very big, the application only keeps the last successfully simulated year
#define FLAG_SAVE_RESTART
output.restart.enabled = 1

# Years for saving the variable
#const int WRITE_YEARS[] = {0, 1, 24, 25, 30, 35, 40, 45, 49};
#output.year = 0

# Time steps for saving the variable over a year
#output.day = 4, 9, 14, 19, 24, 29, 34, 39, 44, 49, 54, 59, 64, 69, 74, 79, 84, 89, 94, 99, 104, 109, 114, 119, 124, 129, 134, 139, 144, 149, 154, 159, 164, 169, 174, 179, 184, 189, 194, 199, 204, 209, 214, 219, 224, 229, 234, 239, 244, 249, 254, 259, 264, 269, 274, 279, 284, 289, 294, 299, 304, 309, 314, 319, 324, 329, 334, 339, 344, 349, 354, 359, 364

# Save variables every three days (only used if output.year and output.day are unset)
apecosm.save.freq = 1

# Number of steps to be written in NetCDF file before creating a new one
# Since output files are big, this parameter allows you to split the results in multiple NetCDF file instead of saving all the time steps in one huge file
#const int N_WRITE_STEPS_PER_FILE = 73;
output.nday_per_file = 73

# Save OOPE variable
output.oope.enabled = 1

# Parameters for the forage output variable
# Flag for saving the forage variable (big file, careful, several Giga-octets potentially)
#undef FLAG_SAVE_FORAGE
#output.oope3d.enabled = 0
output.oope3d.enabled = 1

# Number of size categories of the forage variable
#const int N_SIZE_CATEGORIES = 5;
#output.oope3d.nclass = 5
output.oope3d.nclass = 1

# Lowest sizes [meter] of the size categories of the forage variable
#const double output_size_class[] = {1.E-3, 5.E-3, 30.E-3, 120.E-3, 600.E-3, Lmax};
#output.oope3d.class = 1.e-3, 5.e-3, 30.e-3, 120.e-3, 600.e-3, 2.
output.oope3d.class = 1.e-3, 1e-2

# Flag for saving mortality variable
#undef FLAG_SAVE_MORTALITY
output.mortality.enabled = 0
# Flag for saving growth variable
#undef FLAG_SAVE_GROWTH
output.growth.enabled = 0
# Flag for saving starvation mortality
#undef FLAG_SAVE_STARVATION
output.starvation.enabled = 0
# Flag for saving functional response
#undef FLAG_SAVE_REPFONCT
output.functional_response.enabled = 0
# Flag for saving forage community_matur
#undef FLAG_SAVE_MATUR
output.maturiry.enabled = 0
# Flag for saving forage community_omega
#undef FLAG_SAVE_OMEGA
output.omega.enabled = 0
# Flag for saving forage community_Mnat
#undef FLAG_SAVE_Mnat
output.natural_mortality.enabled = 0
# Flag for saving school variable
#undef FLAG_SAVE_SCHOOL
output.schooling.enabled = 0
